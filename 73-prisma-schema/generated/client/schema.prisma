// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../generated/docs"
}

generator jsonSchema {
  provider = "node node_modules/prisma-json-schema-generator"
  output   = "../generated/json-schema"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Test {
  id  Int    @id @default(autoincrement())
  aaa String @db.Text
  bbb Int    @map("bbb2") @db.TinyInt // @map 指定数据库字段名
  ccc String @unique @db.VarChar(255)

  @@index([bbb, ccc]) // @@index 指定索引 索引就像书的目录一样，可以加快 sql 查询速度，sql 优化的时候我们经常会把高频查询的字段创建索引。
  @@map("test_test") // @@map 指定表名
}

// 一对多
model Department {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(20)
  createTime DateTime   @default(now())
  updateTime DateTime   @updatedAt
  employees  Employee[]
}

model Employee {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(20)
  phone String @db.VarChar(30)

  deaprtmentId Int        @unique // 如果增加@unique，那么就是一对一了
  department   Department @relation(fields: [deaprtmentId], references: [id])
}

// 多对多
model Post {
  id        Int          @id @default(autoincrement())
  title     String
  content   String?
  published Boolean      @default(false)
  tags      TagOnPosts[]
}

model Tag {
  id    Int          @id @default(autoincrement())
  name  String
  posts TagOnPosts[]
}

model TagOnPosts {
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  tag   Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([postId, tagId]) // @@id 指定联合主键
}

model Aaa {
  id   Int     @id @default(autoincrement())
  name String?
  role EEE     @default(CCC) // 类型枚举
}

enum EEE {
  BBB
  CCC
  DDD
}
